
"""
Type hints for data export functions.
Auto-generated by generate_type_hints.py
"""

from typing import Dict, List, Any, Optional, Union, BinaryIO, TextIO
from datetime import datetime
from pathlib import Path
from src.models.pydantic_models import ScrapedData, DataExportRequest

# Export Format Functions

def export_to_csv(
    data: List[Dict[str, Any]], 
    output_path: Union[str, Path], 
    selected_fields: Optional[List[str]] = None
) -> bool:
    """Export data to CSV format."""
    pass

def export_to_json(
    data: List[Dict[str, Any]], 
    output_path: Union[str, Path], 
    include_metadata: bool = True
) -> bool:
    """Export data to JSON format."""
    pass

def export_to_excel(
    data: List[Dict[str, Any]], 
    output_path: Union[str, Path], 
    sheet_name: str = "Scraped Data"
) -> bool:
    """Export data to Excel format."""
    pass

# Data Filtering Functions

def filter_data_by_date_range(
    data: List[Dict[str, Any]], 
    start_date: Optional[datetime], 
    end_date: Optional[datetime]
) -> List[Dict[str, Any]]:
    """Filter data by date range."""
    pass

def filter_data_by_confidence(
    data: List[Dict[str, Any]], 
    min_confidence: float
) -> List[Dict[str, Any]]:
    """Filter data by minimum confidence score."""
    pass

def filter_data_by_job_ids(
    data: List[Dict[str, Any]], 
    job_ids: List[str]
) -> List[Dict[str, Any]]:
    """Filter data by job IDs."""
    pass

def select_export_fields(
    data: List[Dict[str, Any]], 
    selected_fields: List[str]
) -> List[Dict[str, Any]]:
    """Select specific fields for export."""
    pass

# Format Conversion Functions

def convert_nested_objects_to_strings(data: Dict[str, Any]) -> Dict[str, str]:
    """Convert nested objects to string representation for CSV."""
    pass

def flatten_nested_structure(
    data: Dict[str, Any], 
    separator: str = "_"
) -> Dict[str, Any]:
    """Flatten nested dictionary structure."""
    pass

def prepare_data_for_csv(data: List[Dict[str, Any]]) -> List[Dict[str, str]]:
    """Prepare data for CSV export."""
    pass

def prepare_data_for_json(
    data: List[Dict[str, Any]], 
    include_raw_html: bool = False
) -> Dict[str, Any]:
    """Prepare data for JSON export."""
    pass

# Validation Functions

def validate_export_request(request: DataExportRequest) -> Tuple[bool, List[str]]:
    """Validate export request parameters."""
    pass

def validate_export_data(data: List[Dict[str, Any]]) -> Tuple[bool, List[str]]:
    """Validate data before export."""
    pass

def check_export_file_permissions(output_path: Union[str, Path]) -> bool:
    """Check if export file can be written."""
    pass

# Utility Functions

def generate_export_filename(
    format_type: str, 
    job_name: Optional[str] = None, 
    timestamp: Optional[datetime] = None
) -> str:
    """Generate export filename."""
    pass

def calculate_export_size_estimate(data: List[Dict[str, Any]], format_type: str) -> int:
    """Estimate export file size."""
    pass

def create_export_metadata(
    data_count: int, 
    export_params: Dict[str, Any]
) -> Dict[str, Any]:
    """Create metadata for export."""
    pass
